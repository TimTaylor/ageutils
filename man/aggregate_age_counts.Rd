% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate_age_counts.R
\name{aggregate_age_counts}
\alias{aggregate_age_counts}
\title{Aggregate counts across ages}
\usage{
aggregate_age_counts(counts, ages = 0:(length(counts) - 1L), breaks)
}
\arguments{
\item{counts}{\verb{[numeric]}.

Vector of counts to be aggregated.}

\item{ages}{\verb{[numeric]}.

Vector of age in years.

Double values are coerced to integer prior to categorisation / aggregation.

For \code{aggregate_age_counts()}, these must corresponding to the \code{counts} entry
and will defaults to 0:(N-1) where \code{N} is the number of counts present.

No (non-missing) age can be less than the minimum break.}

\item{breaks}{\verb{[numeric]}.

1 or more cut points in increasing (strictly) order.

These correspond to the left hand side of the desired intervals (e.g. the
closed side of [x, y).

Double values are coerced to integer prior to categorisation.}
}
\value{
A data frame with 4 entries; \code{interval}, \code{lower_bound}, \code{upper_bound} and an
associated \code{count}.
}
\description{
\code{aggregate_age_counts()} provides aggregation of counts across ages (in
years). It is similar to a \code{cut()} and \code{tapply()} pattern but optimised for
speed over flexibility. It takes a specified set of breaks representing the
left hand limits of a closed open interval, i.e [x, y), and returns the
corresponding interval and upper bounds. The resulting intervals span from
the minimum break through to the maximum age. Missing values are grouped as
NA.
}
\examples{

# default ages generated if only counts provided (here ages will be 0:64)
aggregate_age_counts(counts = 1:65, breaks = c(0L, 1L, 5L, 15L, 25L, 45L, 65L))

# NA ages are handled with their own grouping
ages <- 1:65;
ages[1:44] <- NA
aggregate_age_counts(
    counts = 1:65,
    ages = ages,
    breaks = c(0L, 1L, 5L, 15L, 25L, 45L, 65L)
)

}
